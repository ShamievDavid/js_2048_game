{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","cells","querySelectorAll","rows","gameScore","messageStart","messageWin","messageLose","canMove","direction","left","right","up","down","generateRandom","randomCell","Math","floor","random","length","textContent","randomNum","classList","add","updateCells","forEach","cell","className","filterZero","cellsArray","filter","i","slide","arrayToSlide","updateScore","push","parseInt","slideLeft","row","rowCells","updateArray","map","slideRight","reverse","slideUp","colIndex","children","rowIndex","childElementCount","slideDown","checkGameOver","emptyCells","some","adjacentCells","currentCell","rightCell","bottomCell","remove","checkGameWin","Array","from","addEventListener","contains","replace","e","preventDefault","key"],"mappings":"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","file":"main.6c050c5f.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.button');\nconst cells = document.querySelectorAll('.field-cell');\nconst rows = document.querySelectorAll('.field-row');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nlet canMove = false;\n\nconst direction = {\n  left: 'ArrowLeft',\n  right: 'ArrowRight',\n  up: 'ArrowUp',\n  down: 'ArrowDown',\n};\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    generateRandom();\n    generateRandom();\n\n    messageStart.classList.add('hidden');\n    startButton.classList.replace('start', 'restart');\n    startButton.textContent = 'Restart';\n  } else if (startButton.classList.contains('restart')) {\n    cells.forEach(cell => {\n      cell.className = 'field-cell';\n      cell.textContent = '';\n    });\n\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    gameScore.textContent = 0;\n\n    generateRandom();\n    generateRandom();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  switch (e.key) {\n    case direction.left:\n      slideLeft();\n      checkGameOver();\n      break;\n\n    case direction.right:\n      slideRight();\n      checkGameOver();\n      break;\n\n    case direction.up:\n      slideUp();\n      checkGameOver();\n      break;\n\n    case direction.down:\n      slideDown();\n      checkGameOver();\n      break;\n  }\n\n  checkGameWin();\n});\n\nfunction generateRandom() {\n  const randomCell = Math.floor(Math.random() * cells.length);\n\n  if (cells[randomCell].textContent === '') {\n    const randomNum = Math.random() < 0.1 ? '4' : '2';\n\n    cells[randomCell].textContent = randomNum;\n    cells[randomCell].classList.add(`field-cell--${randomNum}`);\n  } else {\n    generateRandom();\n  }\n}\n\nfunction updateCells() {\n  cells.forEach(cell => {\n    if (cell.textContent === '') {\n      cell.className = 'field-cell';\n    } else {\n      cell.classList = 'field-cell';\n      cell.classList.add(`field-cell--${cell.textContent}`);\n    }\n  });\n}\n\nfunction filterZero(cellsArray) {\n  return cellsArray.filter(i => i !== '');\n}\n\nfunction slide(cellsArray) {\n  let arrayToSlide = filterZero(cellsArray);\n  let updateScore = 0;\n\n  for (let i = 0; i < arrayToSlide.length; i++) {\n    if (arrayToSlide[i] === arrayToSlide[i + 1]) {\n      arrayToSlide[i] *= 2;\n      updateScore += arrayToSlide[i];\n      arrayToSlide[i + 1] = '';\n    }\n  }\n\n  arrayToSlide = filterZero(arrayToSlide);\n\n  while (arrayToSlide.length < cellsArray.length) {\n    arrayToSlide.push('');\n  }\n\n  gameScore.textContent = parseInt(gameScore.textContent) + updateScore;\n\n  return arrayToSlide;\n}\n\nfunction slideLeft() {\n  canMove = false;\n\n  rows.forEach(row => {\n    const rowCells = row.querySelectorAll('.field-cell');\n    const cellsArray = [...rowCells].map(cell => cell.textContent);\n    const updateArray = slide(cellsArray);\n\n    rowCells.forEach((cell, i) => {\n      if (cell.textContent !== updateArray[i]) {\n        canMove = true;\n      }\n\n      cell.textContent = updateArray[i];\n    });\n  });\n\n  if (canMove) {\n    updateCells();\n    generateRandom();\n  }\n}\n\nfunction slideRight() {\n  canMove = false;\n\n  rows.forEach(row => {\n    const rowCells = row.querySelectorAll('.field-cell');\n    const cellsArray = [...rowCells].map(cell => cell.textContent);\n\n    cellsArray.reverse();\n\n    const updateArray = slide(cellsArray);\n\n    updateArray.reverse();\n\n    rowCells.forEach((cell, i) => {\n      if (cell.textContent !== updateArray[i]) {\n        canMove = true;\n      }\n\n      cell.textContent = updateArray[i];\n    });\n  });\n\n  if (canMove) {\n    updateCells();\n    generateRandom();\n  }\n}\n\nfunction slideUp() {\n  canMove = false;\n\n  for (let colIndex = 0; colIndex < rows[0].childElementCount; colIndex++) {\n    const cellsArray = [...rows].map(row => row.children[colIndex].textContent);\n    const updateArray = slide(cellsArray);\n\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      if (rows[rowIndex].children[colIndex]\n        .textContent !== updateArray[rowIndex]) {\n        canMove = true;\n      }\n\n      rows[rowIndex].children[colIndex].textContent = updateArray[rowIndex];\n    }\n  }\n\n  if (canMove) {\n    updateCells();\n    generateRandom();\n  }\n}\n\nfunction slideDown() {\n  canMove = false;\n\n  for (let colIndex = 0; colIndex < rows[0].childElementCount; colIndex++) {\n    const cellsArray = [...rows].map(row => row.children[colIndex].textContent);\n\n    cellsArray.reverse();\n\n    const updateArray = slide(cellsArray);\n\n    updateArray.reverse();\n\n    for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n      if (rows[rowIndex].children[colIndex]\n        .textContent !== updateArray[rowIndex]) {\n        canMove = true;\n      }\n\n      rows[rowIndex].children[colIndex].textContent = updateArray[rowIndex];\n    }\n  }\n\n  if (canMove) {\n    updateCells();\n    generateRandom();\n  }\n}\n\nfunction checkGameOver() {\n  const emptyCells = [...cells].some(cell => cell.textContent === '');\n\n  let adjacentCells = false;\n\n  for (let i = 0; i < cells.length; i++) {\n    const currentCell = cells[i];\n    const rightCell = cells[i + 1];\n    const bottomCell = cells[i + 4];\n\n    if (rightCell && currentCell.textContent === rightCell.textContent) {\n      adjacentCells = true;\n      break;\n    }\n\n    if (bottomCell && currentCell.textContent === bottomCell.textContent) {\n      adjacentCells = true;\n      break;\n    }\n  }\n\n  if (!emptyCells && !adjacentCells) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction checkGameWin() {\n  const winCell = Array.from(cells).some(cell => cell.textContent === '2048');\n\n  if (winCell) {\n    messageWin.classList.remove('hidden');\n  }\n}\n"]}